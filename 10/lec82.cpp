#include "lec82.h"

using namespace std;  //  std:: 생략가능

/*
  Upcasting : 자식에서 부모로 형변환

  오류 상황 확인 및 수정 -< 추후 STL 로 개선
  STL은 C++에서 제공하는 표준 라이브러리로, 자료구조, 알고리즘 등을 편하게 사용할 수 있도록 해줌
*/

//  82. 상속에서의 형변환 (1) - 업캐스팅
void lec82() {

  title_header( "82. 상속에서의 형변환 (1) - 업캐스팅" );

  lec82_1();
  lec82_2();
}

//  반복 횟수 설정
int cnt = 10;

class Animal {
  public:
    float xpos = 1, ypos = 2;
};

class FlyAnimal : public Animal {
  public:
    float zspo = 3;
};

/*  --------------------------------------------------------------------------------  */

//  오류 상황

void printAnimal1( Animal *p ) {
  for ( int i = 0 ; i < cnt ; i++ ) {
    cout << "(" << p[i].xpos << "," << p[i].ypos << ")" << endl;
  }
}

void lec82_1() {

  title_header( "오류 상황..." );

  FlyAnimal *p = new FlyAnimal[cnt];

  printAnimal1( p );

  delete[] p;
}

/*
실행 결과 출력:

==============================
오류 상황...
==============================
(1,2)
(3,1)   <=  (1,2) 가 표시 되어야 하지만, 잘못 표시되고 있음
(2,3)
(1,2)
(3,1)
(2,3)
(1,2)
(3,1)
(2,3)
(1,2)

*/

/*  --------------------------------------------------------------------------------  */
/*  --------------------------------------------------------------------------------  */

//  오류 개선

void printAnimal2( Animal **p ) {
  for ( int i = 0 ; i < cnt ; i++ ) {
    cout << "(" << p[i]->xpos << "," << p[i]->ypos << ")" << endl;
  }
}

void lec82_2() {

  title_header( "오류 수정..." );

  //  포인터 배열 생성
  Animal **pp = new Animal*[cnt];

  //  각 항목에 객체 생성 후 주소값 설정
  for ( int i = 0 ; i < cnt ; i++ ) {
    pp[i] = new FlyAnimal;
  }

  printAnimal2( pp );

  //  각 항목 메모리 해제
  for ( int i = 0 ; i < cnt ; i++ ) {
    delete pp[i];
  }

  //  포인터 배열 메모리 해제
  delete[] pp;
}

/*
실행 결과 출력:

==============================
오류 수정...
==============================
(1,2)
(1,2)
(1,2)
(1,2)
(1,2)
(1,2)
(1,2)
(1,2)
(1,2)
(1,2)

*/

/*  --------------------------------------------------------------------------------  */
